generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String          @id @default(uuid())
  name           String
  loginCode      String          @unique
  role           String          @default("STUDENT")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  teacherGroups  LearningGroup[] @relation("TeacherGroups")
  notes          Note[]
  subjects       Subject[]
  learningGroups LearningGroup[] @relation("StudentGroups")
}

model GradingSchema {
  id            String        @id @default(uuid())
  name          String
  structure     String
  groupId       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  learningGroup LearningGroup @relation(fields: [groupId], references: [id])
}

model LearningGroup {
  id             String            @id @default(uuid())
  name           String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  teacherId      String
  gradingSchemas GradingSchema[]
  assignments    GroupAssignment[]
  teacher        User              @relation("TeacherGroups", fields: [teacherId], references: [id])
  students       User[]            @relation("StudentGroups")
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blocks      Block[]
  teacher     User     @relation(fields: [teacherId], references: [id])
}

model Block {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  subjectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subject     Subject  @relation(fields: [subjectId], references: [id])
  units       Unit[]
}

model Unit {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  blockId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
  block       Block    @relation(fields: [blockId], references: [id])
}

model Topic {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  unitId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  unit        Unit     @relation(fields: [unitId], references: [id])
}

model Lesson {
  id          String           @id @default(uuid())
  name        String
  description String?
  order       Int              @default(0)
  topicId     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  topic       Topic            @relation(fields: [topicId], references: [id])
  materials   LessonMaterial[]
}

model GroupAssignment {
  id        String        @id @default(uuid())
  groupId   String
  type      String
  refId     String
  createdAt DateTime      @default(now())
  group     LearningGroup @relation(fields: [groupId], references: [id])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  authorId  String
  isPrivate Boolean  @default(true)
  tags      String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model Material {
  id              String           @id @default(uuid())
  fileName        String
  filePath        String
  type            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lessonMaterials LessonMaterial[]
}

model LessonMaterial {
  id         String   @id @default(uuid())
  lessonId   String
  materialId String
  createdAt  DateTime @default(now())
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])
}
