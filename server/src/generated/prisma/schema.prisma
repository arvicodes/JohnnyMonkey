generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String              @id @default(uuid())
  name           String
  loginCode      String              @unique
  role           String              @default("STUDENT")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  avatarEmoji    String?
  teacherGroups  LearningGroup[]     @relation("TeacherGroups")
  notes          Note[]
  quizzes        Quiz[]
  participations QuizParticipation[]
  subjects       Subject[]
  learningGroups LearningGroup[]     @relation("StudentGroups")
  grades         Grade[]
}

model GradingSchema {
  id            String        @id @default(uuid())
  name          String
  structure     String
  groupId       String
  gradingSystem String        @default("GERMAN") // GERMAN oder MSS
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  learningGroup LearningGroup @relation(fields: [groupId], references: [id])
  grades        Grade[]
}

model Grade {
  id           String        @id @default(uuid())
  studentId    String
  schemaId     String
  categoryName String
  grade        Float
  weight       Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  student      User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  schema       GradingSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)

  @@unique([studentId, schemaId, categoryName])
}

model LearningGroup {
  id             String            @id @default(uuid())
  name           String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  teacherId      String
  gradingSchemas GradingSchema[]
  assignments    GroupAssignment[]
  teacher        User              @relation("TeacherGroups", fields: [teacherId], references: [id])
  students       User[]            @relation("StudentGroups")
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blocks      Block[]
  teacher     User     @relation(fields: [teacherId], references: [id])
}

model Block {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  subjectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subject     Subject  @relation(fields: [subjectId], references: [id])
  units       Unit[]
}

model Unit {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  blockId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
  block       Block    @relation(fields: [blockId], references: [id])
}

model Topic {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int      @default(0)
  unitId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  unit        Unit     @relation(fields: [unitId], references: [id])
}

model Lesson {
  id            String           @id @default(uuid())
  name          String
  description   String?
  order         Int              @default(0)
  topicId       String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  topic         Topic            @relation(fields: [topicId], references: [id])
  materials     LessonMaterial[]
  lessonQuizzes LessonQuiz[]
}

model GroupAssignment {
  id        String        @id @default(uuid())
  groupId   String
  type      String
  refId     String
  createdAt DateTime      @default(now())
  group     LearningGroup @relation(fields: [groupId], references: [id])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  authorId  String
  isPrivate Boolean  @default(true)
  tags      String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model Material {
  id              String           @id @default(uuid())
  fileName        String
  filePath        String
  type            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lessonMaterials LessonMaterial[]
}

model LessonMaterial {
  id         String   @id @default(uuid())
  lessonId   String
  materialId String
  createdAt  DateTime @default(now())
  material   Material @relation(fields: [materialId], references: [id])
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
}

model Quiz {
  id               String         @id @default(uuid())
  title            String
  description      String?
  sourceFile       String
  shuffleQuestions Boolean        @default(true)
  shuffleAnswers   Boolean        @default(true)
  timeLimit        Int            @default(30)
  teacherId        String
  gradeCategory    String? // New field for grade category
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  lessonQuizzes    LessonQuiz[]
  teacher          User           @relation(fields: [teacherId], references: [id])
  questions        QuizQuestion[]
  sessions         QuizSession[]
}

model QuizQuestion {
  id            String       @id @default(uuid())
  question      String
  correctAnswer String
  options       String
  order         Int
  quizId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  answers       QuizAnswer[]
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model LessonQuiz {
  id        String   @id @default(uuid())
  lessonId  String
  quizId    String
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([lessonId, quizId])
}

model QuizSession {
  id             String              @id @default(uuid())
  quizId         String
  isActive       Boolean             @default(false)
  startedAt      DateTime?
  endedAt        DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  participations QuizParticipation[]
  quiz           Quiz                @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizParticipation {
  id          String       @id @default(uuid())
  sessionId   String
  studentId   String
  startedAt   DateTime?
  completedAt DateTime?
  score       Int?
  maxScore    Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  answers     QuizAnswer[]
  student     User         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session     QuizSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
}

model QuizAnswer {
  id              String            @id @default(uuid())
  participationId String
  questionId      String
  selectedAnswer  String
  isCorrect       Boolean
  points          Int               @default(0)
  answeredAt      DateTime          @default(now())
  question        QuizQuestion      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  participation   QuizParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  @@unique([participationId, questionId])
}
