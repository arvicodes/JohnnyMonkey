// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String          @id @default(uuid())
  name           String
  loginCode      String          @unique
  role           String          @default("STUDENT")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  learningGroups LearningGroup[] @relation("StudentGroups")
  teacherGroups  LearningGroup[] @relation("TeacherGroups")
  subjects       Subject[]
}

model GradingSchema {
  id            String       @id @default(uuid())
  name          String
  structure     String       // JSON string representing the hierarchical structure
  learningGroup LearningGroup @relation(fields: [groupId], references: [id])
  groupId       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model LearningGroup {
  id            String    @id @default(uuid())
  name          String
  teacher       User      @relation("TeacherGroups", fields: [teacherId], references: [id])
  teacherId     String
  students      User[]    @relation("StudentGroups")
  gradingSchemas GradingSchema[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  description String?
  teacher     User     @relation(fields: [teacherId], references: [id])
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blocks        Block[]
}

model Block {
  id          String   @id @default(uuid())
  name        String
  description String?
  subject     Subject  @relation(fields: [subjectId], references: [id])
  subjectId   String
  units       Unit[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Unit {
  id          String   @id @default(uuid())
  name        String
  description String?
  block       Block    @relation(fields: [blockId], references: [id])
  blockId     String
  topics      Topic[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Topic {
  id          String   @id @default(uuid())
  name        String
  description String?
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id          String   @id @default(uuid())
  name        String
  description String?
  topic       Topic    @relation(fields: [topicId], references: [id])
  topicId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
